package rules;

import com.ftn.sbnz.backward.model.models.Location;
import com.ftn.sbnz.backward.model.models.Student;
import com.ftn.sbnz.backward.model.models.PersonalityTrait
import com.ftn.sbnz.backward.model.models.*;
import com.ftn.sbnz.backward.service.services.*;
import java.util.List
import java.util.ArrayList;

rule "personality traits empty"
when
    String( this == "personality traits empty" )
    $student: Student($id: id)
        eval($student.getPersonalityTraits() == null || $student.getPersonalityTraits().isEmpty())
then
    System.out.println("Lista personalityTraits je prazna za studenta: " + $id);
end

//rule "Obradi Osobine Licnosti"
//when
//    $student: Student(personalityTraits != null)
//then
//    // Izvucite osobine licnosti i izvrsite metode ucenja
//    List<PersonalityTrait> osobine = $student.getPersonalityTraits();
//    for (PersonalityTrait osobina : osobine) {
//        MetodaUcenja.izvrsiMetoduUcenja(osobina);
//    }
//end


rule "recommend learning methods for personality trait - EXTROVERTED"
when
    $student: Student(personalityTraits contains PersonalityTrait.EXTROVERTED)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnTraits());
    if (!learningMethods.contains(LearningMethod.GROUP_LEARNING)) {
            learningMethods.add(LearningMethod.GROUP_LEARNING);
        }
    if (!learningMethods.contains(LearningMethod.AUDITORY)) {
        learningMethods.add(LearningMethod.VERBAL);
    } 

    if (!learningMethods.contains(LearningMethod.VISUAL)) {
        learningMethods.add(LearningMethod.VISUAL);
    } 

    modify($student) {
        for (LearningMethod lm : learningMethods)
        setLearningMethodsBasedOnTraits(lm);
    }

    System.out.println("Izmenjeni objekat studenta: " + $student);
end

rule "recommend learning methods for personality trait - INTROVERTED"
when
    $student: Student(personalityTraits contains PersonalityTrait.INTROVERTED)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnTraits());
    if (!learningMethods.contains(LearningMethod.AUDITORY)) {
            learningMethods.add(LearningMethod.AUDITORY);
    }
    if (!learningMethods.contains(LearningMethod.VISUAL)) {
        learningMethods.add(LearningMethod.VISUAL);
    }
    if (!learningMethods.contains(LearningMethod.LEARNING_THROUGH_PLAY)) {
        learningMethods.add(LearningMethod.LEARNING_THROUGH_PLAY);
    }
    modify($student) {
        for (LearningMethod lm : learningMethods)
        setLearningMethodsBasedOnTraits(lm);
    }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end

rule "recommend learning methods for personality trait - ANALYTICAL"
when
    $student: Student(personalityTraits contains PersonalityTrait.ANALYTICAL)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnTraits());
    if (!learningMethods.contains(LearningMethod.LOGICAL_MATHEMATICAL)) {
            learningMethods.add(LearningMethod.LOGICAL_MATHEMATICAL);
    }
    if (!learningMethods.contains(LearningMethod.KINESTHETIC)) {
        learningMethods.add(LearningMethod.KINESTHETIC);
    }
    if (!learningMethods.contains(LearningMethod.GROUP_LEARNING)) {
        learningMethods.add(LearningMethod.GROUP_LEARNING);
    }
    modify($student) {
        for (LearningMethod lm : learningMethods)
        setLearningMethodsBasedOnTraits(lm);
    }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end

rule "recommend learning methods for personality trait - CREATIVE"
when
    $student: Student(personalityTraits contains PersonalityTrait.CREATIVE)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnTraits());
    if (!learningMethods.contains(LearningMethod.LEARNING_THROUGH_PLAY)) {
            learningMethods.add(LearningMethod.LEARNING_THROUGH_PLAY);
    }
    if (!learningMethods.contains(LearningMethod.AUDIO_VISUAL)) {
        learningMethods.add(LearningMethod.AUDIO_VISUAL);
    }
    if (!learningMethods.contains(LearningMethod.KINESTHETIC)) {
        learningMethods.add(LearningMethod.KINESTHETIC);
    }
    modify($student) {
        for (LearningMethod lm : learningMethods)
        setLearningMethodsBasedOnTraits(lm);
    }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end


rule "recommend learning methods for personality trait - PRACTICAL"
when
    $student: Student(personalityTraits contains PersonalityTrait.PRACTICAL)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnTraits());
    if (!learningMethods.contains(LearningMethod.KINESTHETIC)) {
            learningMethods.add(LearningMethod.KINESTHETIC);
    }
    if (!learningMethods.contains(LearningMethod.GROUP_LEARNING)) {
        learningMethods.add(LearningMethod.GROUP_LEARNING);
    }
    if (!learningMethods.contains(LearningMethod.LEARNING_THROUGH_PLAY)) {
        learningMethods.add(LearningMethod.LEARNING_THROUGH_PLAY);
    }
    modify($student) {
        for (LearningMethod lm : learningMethods)
        setLearningMethodsBasedOnTraits(lm);
    }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end


rule "recommend learning methods for personality trait - ORGANIZED"
when
    $student: Student(personalityTraits contains PersonalityTrait.ORGANIZED)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnTraits());
    if (!learningMethods.contains(LearningMethod.VISUAL)) {
            learningMethods.add(LearningMethod.VISUAL);
    }
    if (!learningMethods.contains(LearningMethod.KINESTHETIC)) {
        learningMethods.add(LearningMethod.KINESTHETIC);
    }
    if (!learningMethods.contains(LearningMethod.GROUP_LEARNING)) {
        learningMethods.add(LearningMethod.GROUP_LEARNING);
    }
    modify($student) {
        for (LearningMethod lm : learningMethods)
        setLearningMethodsBasedOnTraits(lm);
    }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end


rule "recommend learning methods for personality trait - REFLECTIVE"
when
    $student: Student(personalityTraits contains PersonalityTrait.REFLECTIVE)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnTraits());
    if (!learningMethods.contains(LearningMethod.VERBAL)) {
            learningMethods.add(LearningMethod.VERBAL);
    }
    if (!learningMethods.contains(LearningMethod.KINESTHETIC)) {
        learningMethods.add(LearningMethod.KINESTHETIC);
    }
    modify($student) {
        for (LearningMethod lm : learningMethods)
        setLearningMethodsBasedOnTraits(lm);
    }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end

rule "recommend learning methods for field - NATURAL SCIENCES"
when
    $student: Student(field == Field.NATURAL_SCIENCES)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.AUDITORY)) {
                learningMethodsBasedOnField.add(LearningMethod.AUDITORY);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.VERBAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VERBAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end


rule "recommend learning methods for field - SOCIAL SCIENCES"
when
    $student: Student(field == Field.SOCIAL_SCIENCES)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.GROUP_LEARNING)) {
                learningMethodsBasedOnField.add(LearningMethod.GROUP_LEARNING);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.VERBAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VERBAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end

rule "recommend learning methods for field - MEDICAL SCIENCES"
when
    $student: Student(field == Field.MEDICAL)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.GROUP_LEARNING)) {
                learningMethodsBasedOnField.add(LearningMethod.GROUP_LEARNING);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.VERBAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VERBAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end

when
    $student: Student(field == Field.SOCIAL_SCIENCES)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.GROUP_LEARNING)) {
                learningMethodsBasedOnField.add(LearningMethod.GROUP_LEARNING);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.VERBAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VERBAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end

when
    $student: Student(field == Field.SOCIAL_SCIENCES)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.GROUP_LEARNING)) {
                learningMethodsBasedOnField.add(LearningMethod.GROUP_LEARNING);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.VERBAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VERBAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end

when
    $student: Student(field == Field.SOCIAL_SCIENCES)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.GROUP_LEARNING)) {
                learningMethodsBasedOnField.add(LearningMethod.GROUP_LEARNING);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.VERBAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VERBAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end
//
//// Define rules for other personality traits similarly
//


//query isContainedIn( String x, String y )
//  Location( x, y; )
//  or
//  ( Location( z, y; ) and isContainedIn( x, z; ) )
//end

rule "go" salience 10
when
    $s : String(  )
then
    System.out.println( $s );
end


rule "go1"
when
    String( this == "go1" )
//    isContainedIn("Office", "House"; )
then
    System.out.println( "office is inhousee" );
end


//
//rule "go2"
//when
//    String( this == "go2" )
//    isContainedIn("Draw", "House"; )
//then
//    System.out.println( "Draw in the House" );
//end
//
//rule "go3"
//when
//    String( this == "go3" )
//    isContainedIn("Key", "Office"; )
//then
//    System.out.println( "Key in the Office" );
//end
//
//
//rule "go4"
//when
//    String( this == "go4" )
//    isContainedIn(thing, "Office"; )
//then
//    System.out.println( "thing " + thing + " is in the Office" );
//end
//
//rule "go5"
//when
//    String( this == "go5" )
//    isContainedIn(thing, location; )
//then
//    System.out.println( "thing " + thing + " is in " + location );
//end