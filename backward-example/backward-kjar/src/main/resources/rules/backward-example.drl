package rules;

import com.ftn.sbnz.backward.model.models.Location;
import com.ftn.sbnz.backward.model.models.Student;
import com.ftn.sbnz.backward.model.models.PersonalityTrait
import com.ftn.sbnz.backward.model.models.*;
import com.ftn.sbnz.backward.service.services.*;
import java.util.List
import java.util.ArrayList;

rule "personality traits empty"
when
    String( this == "personality traits empty" )
    $student: Student($id: id)
        eval($student.getPersonalityTraits() == null)
then
    System.out.println("Lista personalityTraits je prazna za studenta: " + $id);
end

//rule "Obradi Osobine Licnosti"
//when
//    $student: Student(personalityTraits != null)
//then
//    // Izvucite osobine licnosti i izvrsite metode ucenja
//    List<PersonalityTrait> osobine = $student.getPersonalityTraits();
//    for (PersonalityTrait osobina : osobine) {
//        MetodaUcenja.izvrsiMetoduUcenja(osobina);
//    }
//end


rule "recommend learning methods for personality trait - EXTROVERTED"
when
    $student: Student(personalityTraits contains PersonalityTrait.EXTROVERTED)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnTraits());
        if (!learningMethods.contains(LearningMethod.GROUP_LEARNING)) {
                learningMethods.add(LearningMethod.GROUP_LEARNING);
            }
            if (!learningMethods.contains(LearningMethod.VERBAL)) {
                learningMethods.add(LearningMethod.VERBAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnTraits(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end


rule "recommend learning methods for field - NATURAL SCIENCES"
when
    $student: Student(field == Field.NATURAL_SCIENCES)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.AUDITORY)) {
                learningMethodsBasedOnField.add(LearningMethod.AUDITORY);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.VERBAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VERBAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end


rule "recommend learning methods for field - SOCIAL SCIENCES"
when
    $student: Student(field == Field.SOCIAL_SCIENCES)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.GROUP_LEARNING)) {
                learningMethodsBasedOnField.add(LearningMethod.GROUP_LEARNING);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.VERBAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VERBAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end

rule "recommend learning methods for field - MEDICAL SCIENCES"
when
    $student: Student(field == Field.MEDICAL_SCIENCES)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.KINESTHETIC)) {
                learningMethodsBasedOnField.add(LearningMethod.KINESTHETIC);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.AUDIO_VISUAL)) {
                learningMethodsBasedOnField.add(LearningMethod.AUDIO_VISUAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end

rule "recommend learning methods for field - ARTS"
when
    $student: Student(field == Field.ARTS)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.VISUAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VISUAL);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.AUDIO_VISUAL)) {
                learningMethodsBasedOnField.add(LearningMethod.AUDIO_VISUAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end


rule "recommend learning methods for field - LANGUAGES"
when
    $student: Student(field == Field.LANGUAGES)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.VERBAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VERBAL);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.AUDITORY)) {
                learningMethodsBasedOnField.add(LearningMethod.AUDITORY);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end


rule "recommend learning methods for field - TECHNICAL SCIENCES"
when
    $student: Student(field == Field.TECHNICAL_SCIENCES)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.KINESTHETIC)) {
                learningMethodsBasedOnField.add(LearningMethod.KINESTHETIC);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.VISUAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VISUAL);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.GROUP_LEARNING)) {
                learningMethodsBasedOnField.add(LearningMethod.GROUP_LEARNING);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end

rule "recommend learning methods for field - LECAL ECONOMIC SCIENCES"
when
    $student: Student(field == Field.LECAL_ECONOMIC_SCIENCES)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.AUDITORY)) {
                learningMethodsBasedOnField.add(LearningMethod.AUDITORY);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.VISUAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VISUAL);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.LOGICAL_MATHEMATICAL)) {
                learningMethodsBasedOnField.add(LearningMethod.LOGICAL_MATHEMATICAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end


rule "recommend learning methods for field - ARGICULTURE ENVIRONMENTAL SCIENCES"
when
    $student: Student(field == Field.ARGICULTURE_ENVIRONMENTAL_SCIENCES)
then
    ArrayList<LearningMethod> learningMethods = new ArrayList<LearningMethod>($student.getLearningMethodsBasedOnField());
        if (!learningMethodsBasedOnField.contains(LearningMethod.AUDIO_VISUAL)) {
                learningMethodsBasedOnField.add(LearningMethod.AUDIO_VISUAL);
            }
            if (!learningMethodsBasedOnField.contains(LearningMethod.VISUAL)) {
                learningMethodsBasedOnField.add(LearningMethod.VISUAL);
            }
        modify($student) {
            for (LearningMethod lm : learningMethods)
            setLearningMethodsBasedOnField(lm);
        }
    System.out.println("Izmenjeni objekat studenta: " + $student);
end

//query isContainedIn( String x, String y )
//  Location( x, y; )
//  or
//  ( Location( z, y; ) and isContainedIn( x, z; ) )
//end

rule "go" salience 10
when
    $s : String(  )
then
    System.out.println( $s );
end


rule "go1"
when
    String( this == "go1" )
//    isContainedIn("Office", "House"; )
then
    System.out.println( "office is inhousee" );
end

