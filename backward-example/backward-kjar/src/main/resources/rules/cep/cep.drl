import java.util.List;
import java.util.Random;

rule "Recommend Learning Methods Based on Personality Traits"
when
    $student : Student($personality : personalityTraits)
    $learningMethod : LearningMethod(personalities contains $personality)
then
    String recommendedLearningMethod = recommendLearningMethod($personality);
    System.out.println("Recommended learning method for student " + $student.getName() + ": " + recommendedLearningMethod);
end

function String recommendLearningMethod(List<PersonalityTrait> personalityTraits) {
    Map<PersonalityTrait, List<String>> recommendationMap = new HashMap<>();
    recommendationMap.put(PersonalityTrait.EXTROVERTED, Arrays.asList("GROUP_LEARNING", "AUDITORY", "VISUAL"));
    recommendationMap.put(PersonalityTrait.INTROVERTED, Arrays.asList("AUDITORY", "VISUAL", "LEARNING_THROUGH_PLAY"));
    recommendationMap.put(PersonalityTrait.ANALYTICAL, Arrays.asList("LOGICAL_MATHEMATICAL", "KINESTHETIC", "GROUP_LEARNING"));
    recommendationMap.put(PersonalityTrait.CREATIVE, Arrays.asList("LEARNING_THROUGH_PLAY", "AUDIO_VISUAL", "KINESTHETIC"));
    recommendationMap.put(PersonalityTrait.PRACTICAL, Arrays.asList("KINESTHETIC", "GROUP_LEARNING", "LEARNING_THROUGH_PLAY"));
    recommendationMap.put(PersonalityTrait.ORGANIZED, Arrays.asList("VISUAL", "KINESTHETIC", "GROUP_LEARNING"));
    recommendationMap.put(PersonalityTrait.REFLECTIVE, Arrays.asList("VERBAL", "KINESTHETIC"));

    for (PersonalityTrait trait : personalityTraits) {
        if (recommendationMap.containsKey(trait)) {
            List<String> methods = recommendationMap.get(trait);
            return methods.get(new Random().nextInt(methods.size()));
        }
    }

    return "DEFAULT_LEARNING_METHOD";
}
